hystrix（ 断路器）https://www.cnblogs.com/gaoyanqing/p/7470085.html

    在一个分布式系统里，许多依赖不可避免的会调用失败（网络连接缓慢，资源繁忙，暂时不可用，服务脱机），比如超时、异常等，
    Hystrix 能保证在一个依赖出问题的情况下，不会导致整体服务失败
    Hystrix提供了熔断、隔离、Fallback、cache、监控等功能，能够在一个、或多个依赖同时出现问题时保证系统依然可用。

    在大中型分布式系统中，通常系统很多依赖(HTTP,hession,Netty,Dubbo等)
    在高并发访问下,这些依赖的稳定性与否对系统的影响非常大,但是依赖有很多不可控问题:如等
    在复杂的分布式架构的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。
     例如:一个依赖30个SOA服务的系统,每个服务99.99%可用。
        99.99%的30次方 ≈ 99.7%
        0.3% 意味着一亿次请求 会有 3,000,00次失败
        换算成时间大约每月有2个小时服务不稳定.
        随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.

        解决问题方案:
            对依赖做隔离,Hystrix就是处理依赖隔离的框架,同时也是可以帮我们做依赖服务的治理和监控.

    Hystrix的设计原则
        资源隔离机制（线程池隔离和信号量隔离）：限制调用分布式服务的资源使用，某一个调用的服务出现问题不会影响其它服务调用。
        限流机制：限流机制主要是提前对各个类型的请求设置最高的QPS阈值，若高于设置的阈值则对该请求直接返回，不再调用后续资源。
        熔断机制：当失败率达到阀值自动触发降级（如因网络故障、超时造成的失败率真高），熔断器触发的快速失败会进行快速恢复。
        降级机制：超时降级、资源不足时（线程或信号量）降级 、运行异常降级等，降级后可以配合降级接口返回托底数据。
        缓存支持：提供了请求缓存、请求合并实现
        通过近实时的统计/监控/报警功能，来提高故障发现的速度
        通过近实时的属性和配置热修改功能，来提高故障处理和恢复的速度


 二:Hystrix如何解决依赖隔离
     1:Hystrix使用命令模式HystrixCommand(Command)包装依赖调用逻辑，每个命令在单独线程中/信号授权下执行。
     2:可配置依赖调用超时时间,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。
     3:为每个依赖提供一个小的线程池（或信号），如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。
     4:依赖调用结果分:成功，失败（抛出异常），超时，线程拒绝，短路。 请求失败(异常，拒绝，超时，短路)时执行fallback(降级)逻辑。
     5:提供熔断器组件,可以自动运行或手动调用,停止当前依赖一段时间(10秒)，熔断器默认错误率阈值为50%,超过将自动运行。
     6:提供近实时依赖的统计和监控


    NOTE:依赖调用和降级调用使用不同的线程池做隔离，防止上层线程池跑满，影响二级降级逻辑调用.

    线程池隔离技术
        tomcat  接到请求后，会调用 hystrix 线程池的线程执行，当线程池满了，fallback 降级
