https://blog.csdn.net/ityouknow/article/details/79215698

Spring Cloud Zuul
核心是过滤器（filter），用来实现对服务的控制

可以用作服务网关，转发请求。还能实现 鉴权，请求统计等功能

生命周期分为：
PRE：
    这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。
ROUTING：
    这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient 或 Netfilx Ribbon请求微服务。
POST：
    这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。
ERROR：
    在其他阶段发生错误时执行该过滤器。
除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。
例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。

demo 里完成的功能
    1 网关
    2 负载均衡
    3 Filter 鉴权
    4 熔断：在被代理的服务挂掉后，直接返回错误响应信息
    5 重试



